import YAML from "yaml";
import { existsSync } from "fs";
import { readFile, writeFile } from "fs/promises";
import { BuildFlags } from "../api/BuildFlags";
import { generateOverrides } from "../api/generateOverrides";

const parseArgs = (args: string[]) => {
  let command;
  const flagsToDisable = new Set<string>();
  const flagsToEnable = new Set<string>();
  args.slice(2).forEach((arg) => {
    if (arg.startsWith("-")) {
      flagsToDisable.add(arg.replace("-", ""));
      return;
    }

    if (arg.startsWith("+")) {
      flagsToEnable.add(arg.replace("+", ""));
      return;
    }

    command = arg;
  });
  return { command, flagsToDisable, flagsToEnable };
};

const printHelp = (command?: string) => {
  if (command) {
    console.error(`Unknown command: ${command}`);
  }
  console.log(`Usage: build-flags [command] [flags]
  Commands:
    init      Initialize flags.yml and buildFlags.ts for the project in the current directory
    override  Override default flags with provided flag arguments: +flag to enable, -flag to disable
  `);
};

const initFlagsFile = async () => {
  const srcPaths = ["src", "app"];
  const srcFolder = srcPaths.find((path) => existsSync(path));
  const gitignoreExists = existsSync(".gitignore");
  const baseFlags = {
    mergePath: srcFolder ? `${srcFolder}/buildFlags.ts` : "buildFlags.ts",
    flags: {
      exampleFlag: {
        value: false,
        meta: {
          note: "This is an example flag, you can delete this or make it yours!",
        },
      },
    },
  };
  console.log("");
  await writeFile("flags.yml", YAML.stringify(baseFlags, null, 2));
  console.log("Wrote default flags to flags.yml in the current directory");
  const flags = new BuildFlags(baseFlags.flags);
  await flags.save(baseFlags.mergePath);
  if (gitignoreExists) {
    const gitignore = await readFile(".gitignore", { encoding: "utf-8" });
    await writeFile(
      ".gitignore",
      `${gitignore}\n\n# Runtime build flags generated by npx build-flags\n${baseFlags.mergePath}`
    );
  }
  console.log(
    `Wrote runtime flags to ${baseFlags.mergePath}${
      gitignoreExists ? " (and added this to your .gitignore)" : ""
    }`
  );
};

const run = async () => {
  const { command, flagsToDisable, flagsToEnable } = parseArgs(process.argv);

  if (command === "init") {
    await initFlagsFile();
    return;
  }

  if (command === "override") {
    await generateOverrides({ flagsToEnable, flagsToDisable });
    return;
  }

  printHelp(command);
};

run().catch((e) => {
  console.error(e);
  process.exit(1);
});
